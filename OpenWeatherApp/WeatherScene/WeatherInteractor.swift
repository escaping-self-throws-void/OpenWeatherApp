//
//  WeatherInteractor.swift
//  OpenWeatherApp
//
//  Created by Paul Matar on 04/07/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WeatherBusinessLogic {
    func fetchData(request: WeatherRequest)
}

protocol WeatherDataStore {
    var weatherList: [List] { get }
    var city: City? { get }
    var error: Error? { get }
}

class WeatherInteractor: WeatherBusinessLogic, WeatherDataStore {
    var weatherList: [List] = []
    var city: City?
    var error: Error?
    
    var presenter: WeatherPresentationLogic?
    
    func fetchData(request: WeatherRequest) {
        Task {
            do {
                let fetchedData = try await WeatherCoordinator.shared
                    .fetchWeather(lat: request.lat, lon: request.lon)
                city = fetchedData.city
                weatherList = fetchedData.list
            } catch let err {
                error = err
            }
            
            let response = WeatherResponse(weatherList: weatherList, city: city, error: error)
            presenter?.presentData(response: response)
        }
//        WeatherCoordinator.shared.fetchWeather(lat: request.lat, lon: request.lon) { [weak self] result in
//            guard let self = self else { return }
//            switch result {
//            case .success(let fetchedData):
//                self.city = fetchedData.city
//                self.weatherList = fetchedData.list
//            case .failure(let err):
//                self.error = err
//            }
//            let response = WeatherResponse(weatherList: self.weatherList, city: self.city, error: self.error)
//            self.presenter?.presentData(response: response)
//        }
    }
}
